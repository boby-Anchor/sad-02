/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com_jFream;

import com_class.DBClass;
import com_class.Universal;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import static javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author CHETHANA
 */
public class grn extends javax.swing.JFrame {

    static Universal u = new Universal();
    public static int itemID, idgrn2;

    public grn() {
        initComponents();
        dateTime(la_date, la_time);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        jScrollPane_item_name.setVisible(false);
       u.imageMethod("/img/2222.jpg", jLabel1);
        combo_supplier_name.grabFocus();
        addComboSearSupplierSearchName();
        addTotableSearItem();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        la_date = new javax.swing.JLabel();
        la_time = new javax.swing.JLabel();
        combo_supplier_name = new javax.swing.JComboBox();
        grn_b_new = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        login_la_mini = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        grn_b_enter = new javax.swing.JButton();
        tx_Item_name1 = new javax.swing.JTextField();
        login_la_cloce = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jScrollPane_item_name = new javax.swing.JScrollPane();
        jList_item_name = new javax.swing.JList();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtable_item = new javax.swing.JTable();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        tx_grn_qty = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        tx_grn_buying_price = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        combo_payment_type = new javax.swing.JComboBox();
        tx_grn_total = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        tx_grn_sell_price = new javax.swing.JTextField();
        tx_grn_payment = new javax.swing.JTextField();
        jSeparator8 = new javax.swing.JSeparator();
        jSeparator9 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_grn_table = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1378, 768));
        setUndecorated(true);
        getContentPane().setLayout(null);

        la_date.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        la_date.setForeground(new java.awt.Color(255, 255, 255));
        la_date.setText("D");
        getContentPane().add(la_date);
        la_date.setBounds(130, 10, 120, 22);

        la_time.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        la_time.setForeground(new java.awt.Color(255, 255, 255));
        la_time.setText("T");
        getContentPane().add(la_time);
        la_time.setBounds(10, 10, 120, 22);

        combo_supplier_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                combo_supplier_nameKeyPressed(evt);
            }
        });
        getContentPane().add(combo_supplier_name);
        combo_supplier_name.setBounds(170, 130, 460, 40);

        grn_b_new.setBackground(new java.awt.Color(255, 255, 255));
        grn_b_new.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        grn_b_new.setForeground(new java.awt.Color(0, 0, 0));
        grn_b_new.setText("New");
        grn_b_new.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                grn_b_newMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                grn_b_newMouseExited(evt);
            }
        });
        grn_b_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grn_b_newActionPerformed(evt);
            }
        });
        getContentPane().add(grn_b_new);
        grn_b_new.setBounds(750, 390, 180, 45);

        jLabel10.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("QTY");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(700, 130, 70, 25);

        login_la_mini.setBackground(new java.awt.Color(102, 204, 255));
        login_la_mini.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        login_la_mini.setForeground(new java.awt.Color(0, 0, 0));
        login_la_mini.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        login_la_mini.setText("-");
        login_la_mini.setOpaque(true);
        login_la_mini.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                login_la_miniMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                login_la_miniMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                login_la_miniMouseExited(evt);
            }
        });
        getContentPane().add(login_la_mini);
        login_la_mini.setBounds(1300, 5, 30, 30);

        jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator6);
        jSeparator6.setBounds(1000, 80, 10, 280);

        grn_b_enter.setBackground(new java.awt.Color(255, 255, 255));
        grn_b_enter.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        grn_b_enter.setForeground(new java.awt.Color(0, 0, 0));
        grn_b_enter.setText("Enter");
        grn_b_enter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                grn_b_enterMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                grn_b_enterMouseExited(evt);
            }
        });
        grn_b_enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grn_b_enterActionPerformed(evt);
            }
        });
        getContentPane().add(grn_b_enter);
        grn_b_enter.setBounds(490, 390, 180, 45);

        tx_Item_name1.setBackground(new java.awt.Color(255, 255, 255));
        tx_Item_name1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tx_Item_name1.setForeground(new java.awt.Color(0, 0, 0));
        tx_Item_name1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tx_Item_name1ActionPerformed(evt);
            }
        });
        tx_Item_name1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tx_Item_name1KeyPressed(evt);
            }
        });
        getContentPane().add(tx_Item_name1);
        tx_Item_name1.setBounds(170, 180, 460, 35);

        login_la_cloce.setBackground(new java.awt.Color(102, 204, 255));
        login_la_cloce.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        login_la_cloce.setForeground(new java.awt.Color(0, 0, 0));
        login_la_cloce.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        login_la_cloce.setText("X");
        login_la_cloce.setOpaque(true);
        login_la_cloce.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                login_la_cloceMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                login_la_cloceMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                login_la_cloceMouseExited(evt);
            }
        });
        getContentPane().add(login_la_cloce);
        login_la_cloce.setBounds(1330, 5, 30, 30);

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator4);
        jSeparator4.setBounds(960, 390, 10, 30);

        jList_item_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jList_item_nameKeyPressed(evt);
            }
        });
        jScrollPane_item_name.setViewportView(jList_item_name);

        getContentPane().add(jScrollPane_item_name);
        jScrollPane_item_name.setBounds(170, 210, 460, 120);

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator5);
        jSeparator5.setBounds(450, 390, 10, 30);
        getContentPane().add(jSeparator2);
        jSeparator2.setBounds(0, 40, 1360, 10);

        jtable_item.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "QTY", "Buying Price", "Sell Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtable_item.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtable_itemMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtable_item);
        if (jtable_item.getColumnModel().getColumnCount() > 0) {
            jtable_item.getColumnModel().getColumn(0).setMinWidth(50);
            jtable_item.getColumnModel().getColumn(0).setPreferredWidth(50);
            jtable_item.getColumnModel().getColumn(0).setMaxWidth(50);
            jtable_item.getColumnModel().getColumn(1).setMinWidth(200);
            jtable_item.getColumnModel().getColumn(1).setPreferredWidth(200);
            jtable_item.getColumnModel().getColumn(1).setMaxWidth(200);
            jtable_item.getColumnModel().getColumn(2).setMinWidth(100);
            jtable_item.getColumnModel().getColumn(2).setPreferredWidth(100);
            jtable_item.getColumnModel().getColumn(2).setMaxWidth(100);
            jtable_item.getColumnModel().getColumn(3).setMinWidth(100);
            jtable_item.getColumnModel().getColumn(3).setPreferredWidth(100);
            jtable_item.getColumnModel().getColumn(3).setMaxWidth(100);
            jtable_item.getColumnModel().getColumn(4).setMinWidth(100);
            jtable_item.getColumnModel().getColumn(4).setPreferredWidth(100);
            jtable_item.getColumnModel().getColumn(4).setMaxWidth(100);
        }

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(810, 470, 550, 270);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator3);
        jSeparator3.setBounds(710, 390, 10, 30);

        jLabel2.setBackground(new java.awt.Color(102, 204, 255));
        jLabel2.setFont(new java.awt.Font("Franklin Gothic Heavy", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("GRN");
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 1370, 40);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(0, 370, 1360, 10);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Supplier Name");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(60, 130, 110, 25);

        jLabel11.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Item Name");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(60, 180, 110, 25);

        tx_grn_qty.setBackground(new java.awt.Color(255, 255, 255));
        tx_grn_qty.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tx_grn_qty.setForeground(new java.awt.Color(0, 0, 0));
        tx_grn_qty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tx_grn_qtyActionPerformed(evt);
            }
        });
        tx_grn_qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tx_grn_qtyKeyPressed(evt);
            }
        });
        getContentPane().add(tx_grn_qty);
        tx_grn_qty.setBounds(800, 130, 170, 35);

        jLabel12.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Sell Price");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(700, 250, 90, 25);

        tx_grn_buying_price.setBackground(new java.awt.Color(255, 255, 255));
        tx_grn_buying_price.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tx_grn_buying_price.setForeground(new java.awt.Color(0, 0, 0));
        tx_grn_buying_price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tx_grn_buying_priceActionPerformed(evt);
            }
        });
        tx_grn_buying_price.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tx_grn_buying_priceKeyPressed(evt);
            }
        });
        getContentPane().add(tx_grn_buying_price);
        tx_grn_buying_price.setBounds(800, 190, 170, 35);

        jLabel15.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Payment Type");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(1030, 190, 110, 25);

        combo_payment_type.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        combo_payment_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Payed", "Initial Payment", "Unpaid" }));
        combo_payment_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_payment_typeActionPerformed(evt);
            }
        });
        getContentPane().add(combo_payment_type);
        combo_payment_type.setBounds(1150, 190, 170, 40);

        tx_grn_total.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tx_grn_total.setForeground(new java.awt.Color(255, 255, 255));
        tx_grn_total.setText("Total");
        getContentPane().add(tx_grn_total);
        tx_grn_total.setBounds(1150, 130, 170, 35);

        jLabel14.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Payment");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(1030, 250, 100, 25);

        jLabel13.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Buying Price");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(700, 190, 90, 25);

        tx_grn_sell_price.setBackground(new java.awt.Color(255, 255, 255));
        tx_grn_sell_price.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tx_grn_sell_price.setForeground(new java.awt.Color(0, 0, 0));
        tx_grn_sell_price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tx_grn_sell_priceActionPerformed(evt);
            }
        });
        tx_grn_sell_price.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tx_grn_sell_priceKeyPressed(evt);
            }
        });
        getContentPane().add(tx_grn_sell_price);
        tx_grn_sell_price.setBounds(800, 250, 170, 35);

        tx_grn_payment.setBackground(new java.awt.Color(255, 255, 255));
        tx_grn_payment.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tx_grn_payment.setForeground(new java.awt.Color(0, 0, 0));
        tx_grn_payment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tx_grn_paymentActionPerformed(evt);
            }
        });
        tx_grn_payment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tx_grn_paymentKeyPressed(evt);
            }
        });
        getContentPane().add(tx_grn_payment);
        tx_grn_payment.setBounds(1150, 250, 170, 35);

        jSeparator8.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator8);
        jSeparator8.setBounds(760, 470, 10, 290);

        jSeparator9.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator9);
        jSeparator9.setBounds(670, 80, 10, 280);

        jTable_grn_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "GRN ID", "Supplier Name", "Date", "Time", "Reaming", "Payment Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_grn_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_grn_tableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable_grn_table);
        if (jTable_grn_table.getColumnModel().getColumnCount() > 0) {
            jTable_grn_table.getColumnModel().getColumn(0).setMinWidth(50);
            jTable_grn_table.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable_grn_table.getColumnModel().getColumn(0).setMaxWidth(50);
            jTable_grn_table.getColumnModel().getColumn(1).setMinWidth(200);
            jTable_grn_table.getColumnModel().getColumn(1).setPreferredWidth(200);
            jTable_grn_table.getColumnModel().getColumn(1).setMaxWidth(200);
            jTable_grn_table.getColumnModel().getColumn(2).setMinWidth(120);
            jTable_grn_table.getColumnModel().getColumn(2).setPreferredWidth(120);
            jTable_grn_table.getColumnModel().getColumn(2).setMaxWidth(120);
            jTable_grn_table.getColumnModel().getColumn(3).setMinWidth(120);
            jTable_grn_table.getColumnModel().getColumn(3).setPreferredWidth(120);
            jTable_grn_table.getColumnModel().getColumn(3).setMaxWidth(120);
            jTable_grn_table.getColumnModel().getColumn(4).setMinWidth(100);
            jTable_grn_table.getColumnModel().getColumn(4).setPreferredWidth(100);
            jTable_grn_table.getColumnModel().getColumn(4).setMaxWidth(100);
            jTable_grn_table.getColumnModel().getColumn(5).setMinWidth(100);
            jTable_grn_table.getColumnModel().getColumn(5).setPreferredWidth(100);
            jTable_grn_table.getColumnModel().getColumn(5).setMaxWidth(100);
        }

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 470, 700, 270);

        jLabel16.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Total");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(1030, 140, 70, 25);

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 40, 1400, 730);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void grn_b_newMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grn_b_newMouseEntered
        buttonMouseEnEx(grn_b_new, 0);
    }//GEN-LAST:event_grn_b_newMouseEntered

    private void grn_b_newMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grn_b_newMouseExited
        buttonMouseEnEx(grn_b_new, 1);
    }//GEN-LAST:event_grn_b_newMouseExited

    private void grn_b_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grn_b_newActionPerformed
        int x = JOptionPane.showConfirmDialog(this, "Do you want add new GRN ?", "Add New One", JOptionPane.YES_NO_OPTION);
        if (JOptionPane.YES_OPTION == x) {
            clearemployeeFields();
            addTotableSearItem();
            tx_Item_name1.grabFocus();
        } else if (JOptionPane.NO_OPTION == x) {
            setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        }
        grn_b_new.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_grn_b_newActionPerformed

    private void login_la_miniMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_la_miniMouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_login_la_miniMouseClicked

    private void login_la_miniMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_la_miniMouseEntered
        login_la_mini.setBackground(Color.gray);
    }//GEN-LAST:event_login_la_miniMouseEntered

    private void login_la_miniMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_la_miniMouseExited
        login_la_mini.setBackground(new Color(102, 204, 255));
    }//GEN-LAST:event_login_la_miniMouseExited

    private void grn_b_enterMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grn_b_enterMouseEntered
        buttonMouseEnEx(grn_b_enter, 0);
    }//GEN-LAST:event_grn_b_enterMouseEntered

    private void grn_b_enterMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grn_b_enterMouseExited
        buttonMouseEnEx(grn_b_enter, 1);
    }//GEN-LAST:event_grn_b_enterMouseExited

    private void grn_b_enterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grn_b_enterActionPerformed
        if (tx_Item_name1.getText().trim().isEmpty()) {
            tx_Item_name1.grabFocus();
        } else if (tx_grn_qty.getText().trim().isEmpty()) {
            tx_grn_qty.grabFocus();
        }else if(tx_grn_buying_price.getText().trim().isEmpty()) {
            tx_grn_buying_price.grabFocus();
        }else if(tx_grn_sell_price.getText().trim().isEmpty()) {
            tx_grn_sell_price.grabFocus();
        } else if (!(tx_grn_qty.getText().trim().isEmpty() & tx_Item_name1.getText().trim().isEmpty() 
                & tx_grn_sell_price.getText().trim().isEmpty() & tx_grn_buying_price.getText().trim().isEmpty() )) {
            addToTable();
        }
        grn_b_enter.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_grn_b_enterActionPerformed

    private void tx_Item_name1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tx_Item_name1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tx_Item_name1ActionPerformed

    private void tx_Item_name1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tx_Item_name1KeyPressed

        TXValidaton(evt, tx_Item_name1, 50, "NA");

        if (evt.getKeyCode() == 10) {
            if (!tx_Item_name1.getText().isEmpty()) {
                tx_grn_qty.grabFocus();
            } else {
                tx_Item_name1.grabFocus();
            }
        }

        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            jList_item_name.grabFocus();
            jList_item_name.setSelectedIndex(0);
            jScrollPane_item_name.setVisible(true);
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            combo_payment_type.grabFocus();
            combo_payment_type.setSelectedIndex(0);
        } else if (!(tx_Item_name1.getText().trim().isEmpty())) {
            searchANDListItem("item", "name", tx_Item_name1.getText(), jList_item_name);
        }


    }//GEN-LAST:event_tx_Item_name1KeyPressed

    private void login_la_cloceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_la_cloceMouseClicked
        SystemClose();
    }//GEN-LAST:event_login_la_cloceMouseClicked

    private void login_la_cloceMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_la_cloceMouseEntered
        login_la_cloce.setBackground(Color.red);
    }//GEN-LAST:event_login_la_cloceMouseEntered

    private void login_la_cloceMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_la_cloceMouseExited
        login_la_cloce.setBackground(new Color(102, 204, 255));
    }//GEN-LAST:event_login_la_cloceMouseExited

    private void jtable_itemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtable_itemMouseClicked

    }//GEN-LAST:event_jtable_itemMouseClicked

    private void jList_item_nameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList_item_nameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!jList_item_name.isSelectionEmpty()) {
                tx_Item_name1.setText(jList_item_name.getSelectedValue().toString());
                jScrollPane_item_name.setVisible(false);
                tx_grn_qty.grabFocus();
            }
        }
    }//GEN-LAST:event_jList_item_nameKeyPressed

    private void tx_grn_qtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tx_grn_qtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tx_grn_qtyActionPerformed

    private void tx_grn_qtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tx_grn_qtyKeyPressed
       TXValidaton(evt, tx_grn_qty, 5, "N");
        if (evt.getKeyCode() == 10) {
            if (!tx_grn_qty.getText().trim().isEmpty()) {
                tx_grn_buying_price.grabFocus();
            } else {
                tx_grn_qty.grabFocus();
            }
        }
    }//GEN-LAST:event_tx_grn_qtyKeyPressed

    private void tx_grn_buying_priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tx_grn_buying_priceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tx_grn_buying_priceActionPerformed

    private void tx_grn_buying_priceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tx_grn_buying_priceKeyPressed
       TXValidaton(evt, tx_grn_buying_price, 7, "N");
        if (evt.getKeyCode() == 10) {
            if (!tx_grn_buying_price.getText().trim().isEmpty()) {
                tx_grn_sell_price.grabFocus();
            } else {
                tx_grn_buying_price.grabFocus();
            }
        }
    }//GEN-LAST:event_tx_grn_buying_priceKeyPressed

    private void tx_grn_paymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tx_grn_paymentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tx_grn_paymentActionPerformed

    private void tx_grn_paymentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tx_grn_paymentKeyPressed
        TXValidaton(evt, tx_grn_payment, 7, "N"); 
        if (!tx_grn_payment.getText().trim().isEmpty()) {
            if (evt.getKeyCode() == 10) {
                tx_grn_total.setText("" + (Double.parseDouble(tx_grn_total.getText()) - Double.parseDouble(tx_grn_payment.getText())));
                addToTable();
                grn_b_enter.doClick();
            }
        } else {
            tx_grn_payment.grabFocus();
        }
    }//GEN-LAST:event_tx_grn_paymentKeyPressed

    private void combo_supplier_nameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_combo_supplier_nameKeyPressed
        if (evt.getKeyCode() == 10) {
            tx_Item_name1.grabFocus();
        }
    }//GEN-LAST:event_combo_supplier_nameKeyPressed

    private void combo_payment_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_payment_typeActionPerformed
        if (combo_payment_type.getSelectedIndex() == 0) {
            tx_grn_payment.setVisible(false);
            grn_b_enter.doClick();
            addToTable();
        } else if (combo_payment_type.getSelectedIndex() == 1) {
            tx_grn_payment.setVisible(true);
            tx_grn_payment.grabFocus();
        } else if (combo_payment_type.getSelectedIndex() == 2) {
            tx_grn_payment.setVisible(false);
            grn_b_enter.doClick();
            addToTable();
        }
        
    }//GEN-LAST:event_combo_payment_typeActionPerformed

    private void tx_grn_sell_priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tx_grn_sell_priceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tx_grn_sell_priceActionPerformed

    private void tx_grn_sell_priceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tx_grn_sell_priceKeyPressed
         TXValidaton(evt, tx_grn_sell_price, 7, "N");
        if (evt.getKeyCode() == 10) {
            if (!tx_grn_sell_price.getText().trim().isEmpty()) {
                addJItemTable();
                tx_Item_name1.grabFocus();
            } else {
                tx_grn_sell_price.grabFocus();
            }
        }

    }//GEN-LAST:event_tx_grn_sell_priceKeyPressed

    private void jTable_grn_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_grn_tableMouseClicked
        DefaultTableModel tlModel = (DefaultTableModel) jTable_grn_table.getModel();

        idgrn2 = Integer.parseInt(tlModel.getValueAt(jTable_grn_table.getSelectedRow(), 0).toString());
       int x = JOptionPane.showConfirmDialog(this, "Did you pay or not  ?", "Pay or Not", JOptionPane.YES_NO_OPTION);
        if (JOptionPane.YES_OPTION == x) {
            int x2 = JOptionPane.showConfirmDialog(this, " Confrom it ?", "Confrom", JOptionPane.YES_NO_OPTION);
            if (JOptionPane.YES_OPTION == x2) {
                updategrnItem("Payed");
            } else if (JOptionPane.NO_OPTION == x2) {
                setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
            }
        } else if (JOptionPane.NO_OPTION == x) {
            setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        }

    }//GEN-LAST:event_jTable_grn_tableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(grn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(grn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(grn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(grn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new grn().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox combo_payment_type;
    private javax.swing.JComboBox combo_supplier_name;
    private javax.swing.JButton grn_b_enter;
    private javax.swing.JButton grn_b_new;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList jList_item_name;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane_item_name;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JTable jTable_grn_table;
    private javax.swing.JTable jtable_item;
    public static javax.swing.JLabel la_date;
    private javax.swing.JLabel la_time;
    private javax.swing.JLabel login_la_cloce;
    private javax.swing.JLabel login_la_mini;
    private javax.swing.JTextField tx_Item_name1;
    private javax.swing.JTextField tx_grn_buying_price;
    private javax.swing.JTextField tx_grn_payment;
    private javax.swing.JTextField tx_grn_qty;
    private javax.swing.JTextField tx_grn_sell_price;
    private javax.swing.JLabel tx_grn_total;
    // End of variables declaration//GEN-END:variables

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> Singltan class 
     * *** >>> Why ------------->>> ek object ekk hdnn
     * *** >>> Parameters ------>>>
     * *** >>> Status ---------->>>
     */
//>>>>>>>>> Get Instance <<<<<<<<<<<  
    private static grn log = new grn();

    public static grn getLoginInstance() {
        return log;
    }
//>>>>>>>>> Get Instance <<<<<<<<<<<         

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> TXValidaton()
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>> KeyEvent evt//JTextField txName//int lenth//String type
     * *** >>> Status ---------->>>
     */
    //>>>>>>>>> TXValidaton open <<<<<<<<<<<   
    private void TXValidaton(KeyEvent evt, JTextField txName, int lenth, String type) {
        int iNumber = evt.getKeyCode();
        if (txName.getText().length() <= lenth) {
            if (type.equals("N")) {

                if ((iNumber >= 96 & iNumber <= 105) | (iNumber >= 48 & iNumber <= 57) | (iNumber == 8) | (iNumber == 17) | (iNumber == 86)) {
                    txName.setEditable(true);
                } else {
                    txName.setEditable(false);
                }

            }
            if (type.equals("A")) {

                if ((iNumber >= 65 & iNumber <= 90) | (iNumber == 8) | (iNumber == 32) | (iNumber == 46) | (iNumber == 17)) {
                    txName.setEditable(true);
                } else {
                    txName.setEditable(false);
                }

            }
            if (type.equals("NA")) {

                if ((iNumber >= 96 & iNumber <= 105) | (iNumber >= 48 & iNumber <= 57) | (iNumber >= 65 & iNumber <= 90) | (iNumber == 8) | (iNumber == 45) | (iNumber == 32) | (iNumber == 44) | (iNumber == 46) | (iNumber == 47)) {
                    txName.setEditable(true);
                } else {
                    txName.setEditable(false);
                }

            }

        } else if ((iNumber == 8)) {
            txName.setEditable(true);
        } else {
            txName.setEditable(false);
        }
    }
    //>>>>>>>>> TXValidaton close <<<<<<<<<<<       
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> clearemployeeFields()
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>> 
     * *** >>> Status ---------->>>
     */
    //>>>>>>>>> clearemployeeFields cloce <<<<<<<<<<<        
    private void clearemployeeFields() {
        tx_Item_name1.setText(null);
        combo_supplier_name.setSelectedIndex(0);
        combo_payment_type.setSelectedIndex(0);
        jtable_item.removeAll();
        tx_grn_qty.setText(null);
        tx_grn_payment.setText(null);
        tx_grn_sell_price.setText(null);
        tx_grn_buying_price.setText(null);
        tx_grn_payment.setVisible(false);
        itemID = 0;
        idgrn2 = 0;
        tx_Item_name1.grabFocus();
        addComboSearSupplierSearchName();
    }
    //>>>>>>>>> clearemployeeFields close <<<<<<<<<<<       
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> SystemClose()
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>> no
     * *** >>> Status ---------->>>
     */
    //>>>>>>>>> System open <<<<<<<<<<<   
    void SystemClose() {
        int x = JOptionPane.showConfirmDialog(this, "Do you sure close GRN Interface ?", "Exit Interface", JOptionPane.YES_NO_OPTION);
        if (JOptionPane.YES_OPTION == x) {
            this.dispose();
        } else if (JOptionPane.NO_OPTION == x) {
            setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
            login_la_cloce.setBackground(new Color(255, 255, 255));
        }
    }
    //>>>>>>>>> System close <<<<<<<<<<<       

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> buttonMouseEnEx()
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>> JButton buttonName, int x
     * *** >>> Status ---------->>>
     */
    //>>>>>>>>> buttonMouseEnEx open <<<<<<<<<<<    
    private void buttonMouseEnEx(JButton buttonName, int x) {
        if (x == 0) {
            buttonName.setBackground(new Color(84, 245, 214));
        } else {
            buttonName.setBackground(new Color(225, 225, 225));
        }
    }
    //>>>>>>>>> buttonMouseEnEx close <<<<<<<<<<<       

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> addToTable()
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>> 
     * *** >>> Status ---------->>>
     */
    //>>>>>>>>> addToTable open <<<<<<<<<<<        
    private void addToTable() {

        try {

            String supplierid = combo_supplier_name.getSelectedItem().toString().split("-")[0];
            String total = tx_grn_total.getText();
            String paymenttype = combo_payment_type.getSelectedItem().toString();

            DBClass.putData("insert into grn (idsupplier,date,time,total,pay_or_not_or) values('" + supplierid + "','" + la_date.getText() + "','" + la_time.getText() + "','" + total + "' , '" + paymenttype + "')");

            ResultSet rs = DBClass.getData("select * from grn ");
            if (rs.last()) {
                idgrn2 = rs.getInt("idgrn");
            }
            int count = 0;
            while (count < jtable_item.getRowCount()) {
                int itemId = Integer.parseInt(jtable_item.getValueAt(count, 0).toString());
                ResultSet rs2 = DBClass.getData("select * from stock where iditem = '" + itemId + "'");
                if (rs2.next()) {
                    int idstock = rs2.getInt("idstock");
                    double qtystock = rs2.getDouble("qty");

                    String itemname = jtable_item.getValueAt(count, 1).toString();
                    double qty = Double.parseDouble(jtable_item.getValueAt(count, 2).toString());
                    double buying_price = Double.parseDouble(jtable_item.getValueAt(count, 3).toString());
                    double sell_price = Double.parseDouble(jtable_item.getValueAt(count, 4).toString());

                    DBClass.putData("update stock set buying_price='" + buying_price + "',  sell_price='" + sell_price + "',qty='" + (qtystock + qty) + "' where  iditem ='" + itemId + "' ");

                    DBClass.putData("insert into grn_item (idstock,idgrn,name,qty,buying_price) values('" + idstock + "','" + idgrn2 + "',"
                            + "'" + itemname + "','" + qty + "' , '" + buying_price + "')");

                }
                count++;
            }

            clearemployeeFields();
            addTotableSearItem();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Bug Error  grnTableInsert !!! \n" + ex, "Error Massage", JOptionPane.ERROR_MESSAGE);
        }
    }
    //>>>>>>>>> addToTable close <<<<<<<<<<<       

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> addTotableSearItem()
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>> 
     * *** >>> Status ---------->>>
     */
    //>>>>>>>>> addTotableSearItem open <<<<<<<<<<<        
    private void addTotableSearItem() {
        try {
            ResultSet rs = DBClass.getData("select g.idgrn,g.idsupplier as grnidsupplier,g.date,i.time,g.total,g.pay_or_not_or,s.name "
                    + "from grn g inner join supplier s on s.idsupplier = g.idsupplier  order by idgrn ");
            DefaultTableModel dm = (DefaultTableModel) jtable_item.getModel();
            dm.setRowCount(0);
            if (DBClass.r.isBeforeFirst() == true) {
                while (rs.next()) {
                    Vector v = new Vector();
                    if (rs.getString("pay_or_not_or").equals("Initial Payment") | rs.getString("pay_or_not_or").equals("Unpaid")) {
                        v.add(rs.getString("idgrn"));
                        v.add(rs.getString("grnidsupplier"));
                        v.add(rs.getString("date"));
                        v.add(rs.getString("time"));
                        v.add(rs.getString("total"));
                        v.add(rs.getString("pay_or_not_or"));
                        dm.addRow(v);
                    }
                }
            }

        } catch (SQLException sqle) {
            JOptionPane.showMessageDialog(this, "\n Item Table Error ::\n " + sqle, "Error Massage", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "\n Item Table Error ::\n " + e, "Error Massage", JOptionPane.ERROR_MESSAGE);
        }
    }
    //>>>>>>>>> addTotableSearItem close <<<<<<<<<<<       

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> searchANDListItem()
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>> String item, String name, String text, JList jList_name
     * *** >>> Status ---------->>>
     */
    //>>>>>>>>> searchANDListItem open <<<<<<<<<<<        
    private void searchANDListItem(String item, String name, String text, JList jList_name) {
        try {
            DBClass.getData("select iditem," + name + " from " + item + " where " + name + " like '" + text + "%' order by " + name);
            Vector v = new Vector();
            jList_name.removeAll();
            if (DBClass.r.isBeforeFirst() == true) {
                while (DBClass.r.next()) {
                    String idname = DBClass.r.getString("iditem") + "-" + DBClass.r.getString(name);
                    v.add(DBClass.r.getString(idname));
                    jList_name.setListData(v);
                }
            } else {
                jList_name.setListData(v);
            }
        } catch (SQLException sqle) {
            JOptionPane.showMessageDialog(null, "Bug Error searchANDList!!! \n " + sqle, "Error Massage", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Bug Error searchANDList!!! \n " + e, "Error Massage", JOptionPane.ERROR_MESSAGE);
        }
    }
    //>>>>>>>>> searchANDListItem close <<<<<<<<<<<       

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> addJItemTable()
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>> 
     * *** >>> Status ---------->>>
     */
    //>>>>>>>>> addJItemTable open <<<<<<<<<<<        
    private void addJItemTable() {
        DefaultTableModel defTabModPen = (DefaultTableModel) jtable_item.getModel();
        Vector v = new Vector();

        int dubItemId = Integer.parseInt(tx_Item_name1.getText().split("-")[0]);
        v.add(tx_Item_name1.getText().split("-")[0]);
        v.add(tx_Item_name1.getText().split("-")[1]);
        boolean b = false;
        int count = 0;
        while (count < jtable_item.getRowCount()) {
            int itemId = Integer.parseInt(jtable_item.getValueAt(count, 0).toString());
            if (dubItemId == itemId) {
                double qty = Double.parseDouble(jtable_item.getValueAt(count, 2).toString());
                v.add(Double.parseDouble(tx_grn_qty.getText()) + qty);
                defTabModPen.removeRow(count);
                b=true;
                break;
            }
        }
        if(b==false){
        v.add(tx_grn_buying_price.getText());
        v.add(tx_grn_sell_price.getText());
        defTabModPen.addRow(v);
        }
    }
    //>>>>>>>>> addJItemTable close <<<<<<<<<<<       

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> updategrnItem()
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>> 
     * *** >>> Status ---------->>>
     */
    //>>>>>>>>> updategrnItem open <<<<<<<<<<<        
    private void updategrnItem(String or_not) {
        try {
            DBClass.putData("update grn set pay_or_not_or='" + or_not + "',  name='0' where  idgrn ='" + idgrn2 + "' ");
            clearemployeeFields();
            addTotableSearItem();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "\n Bug Error grnTableUpdate !!! \n " + ex, "Error Massage", JOptionPane.ERROR_MESSAGE);
        }
    }
    //>>>>>>>>> updategrnItem close <<<<<<<<<<<       

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> addComboSearSupplierSearchName()
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>> 
     * *** >>> Status ---------->>>
     */
    //>>>>>>>>> addComboSearSupplierSearchName open <<<<<<<<<<<        
    private void addComboSearSupplierSearchName() {
        try {
            ResultSet rs = DBClass.getData("select * from supplier order by idsupplier");
            combo_supplier_name.removeAllItems();
            if (DBClass.r.isBeforeFirst() == true) {
                while (rs.next()) {
                    if (rs.getInt("status") == 1) {
                        String idname = rs.getString("idsupplier") + "-" + rs.getString("name");
                        combo_supplier_name.addItem(idname);
                    }
                }
            }

        } catch (SQLException sqle) {
            //sqle.printStackTrace();
            JOptionPane.showMessageDialog(this, "Supplier Table Error ::\n addTotableSearSupplier() \n" + sqle, "Error Massage", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            //e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Supplier Table Error ::\n addTotableSearSupplier() \n" + e, "Error Massage", JOptionPane.ERROR_MESSAGE);
        }
    }
    //>>>>>>>>> addComboSearSupplierSearchName close <<<<<<<<<<<       

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     
    private static void dateTime(JLabel la_date, JLabel la_time) {
        new Thread(() -> {
            StringBuffer sb, sb2;
            sb2 = new StringBuffer(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
            la_date.setText("" + sb2);
            while (true) {
                sb = new StringBuffer(new SimpleDateFormat("HH:mm:ss").format(new Date()));
                la_time.setText("" + sb);
            }
        }).start();
    }

}
