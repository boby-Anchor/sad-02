/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com_jFream;

import com_class.DBClass;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import static javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author CHETHANA
 */
public class employee extends javax.swing.JFrame {

    /**
     * Creates new form employee
     */
    public employee() {
        initComponents();
        addTotableEmployee();
        clearemployeeFields();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        employee_tx_upas2 = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        employee_jTable = new javax.swing.JTable();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        login_la_cloce = new javax.swing.JLabel();
        login_la_mini = new javax.swing.JLabel();
        employee_b_enter = new javax.swing.JButton();
        employee_b_delete = new javax.swing.JButton();
        employee_b_update = new javax.swing.JButton();
        employee_b_search = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        employee_tx_lname = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        employee_tx_fname = new javax.swing.JTextField();
        employee_tx_nic = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        employee_tx_tel = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        employee_tx_address = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        employee_combox_type = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        employee_tx_uname = new javax.swing.JTextField();
        employee_tx_upas1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        employee_b_new = new javax.swing.JButton();
        emoployee_jcheckbox = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1380, 768));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(1380, 768));
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Re-Enter Password");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 350, 140, 25);

        employee_tx_upas2.setBackground(new java.awt.Color(204, 204, 204));
        employee_tx_upas2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        employee_tx_upas2.setForeground(new java.awt.Color(0, 0, 0));
        employee_tx_upas2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                employee_tx_upas2KeyPressed(evt);
            }
        });
        getContentPane().add(employee_tx_upas2);
        employee_tx_upas2.setBounds(150, 350, 330, 28);

        employee_jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fname", "Lname", "NIC", "Tell", "Address", "User Type", "User Name", "Password", "Stat"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        employee_jTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                employee_jTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(employee_jTable);
        if (employee_jTable.getColumnModel().getColumnCount() > 0) {
            employee_jTable.getColumnModel().getColumn(0).setMinWidth(180);
            employee_jTable.getColumnModel().getColumn(0).setPreferredWidth(180);
            employee_jTable.getColumnModel().getColumn(0).setMaxWidth(180);
            employee_jTable.getColumnModel().getColumn(1).setMinWidth(180);
            employee_jTable.getColumnModel().getColumn(1).setPreferredWidth(180);
            employee_jTable.getColumnModel().getColumn(1).setMaxWidth(180);
            employee_jTable.getColumnModel().getColumn(2).setMinWidth(120);
            employee_jTable.getColumnModel().getColumn(2).setPreferredWidth(120);
            employee_jTable.getColumnModel().getColumn(2).setMaxWidth(120);
            employee_jTable.getColumnModel().getColumn(3).setMinWidth(100);
            employee_jTable.getColumnModel().getColumn(3).setPreferredWidth(100);
            employee_jTable.getColumnModel().getColumn(3).setMaxWidth(100);
            employee_jTable.getColumnModel().getColumn(5).setMinWidth(80);
            employee_jTable.getColumnModel().getColumn(5).setPreferredWidth(80);
            employee_jTable.getColumnModel().getColumn(5).setMaxWidth(80);
            employee_jTable.getColumnModel().getColumn(6).setMinWidth(100);
            employee_jTable.getColumnModel().getColumn(6).setPreferredWidth(100);
            employee_jTable.getColumnModel().getColumn(6).setMaxWidth(100);
            employee_jTable.getColumnModel().getColumn(7).setMinWidth(100);
            employee_jTable.getColumnModel().getColumn(7).setPreferredWidth(100);
            employee_jTable.getColumnModel().getColumn(7).setMaxWidth(100);
            employee_jTable.getColumnModel().getColumn(8).setMinWidth(100);
            employee_jTable.getColumnModel().getColumn(8).setPreferredWidth(100);
            employee_jTable.getColumnModel().getColumn(8).setMaxWidth(100);
        }

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 460, 1340, 290);

        jLayeredPane1.setBackground(new java.awt.Color(255, 255, 255));
        jLayeredPane1.setOpaque(true);

        login_la_cloce.setBackground(new java.awt.Color(255, 255, 255));
        login_la_cloce.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        login_la_cloce.setForeground(new java.awt.Color(0, 0, 0));
        login_la_cloce.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        login_la_cloce.setText("X");
        login_la_cloce.setOpaque(true);
        login_la_cloce.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                login_la_cloceMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                login_la_cloceMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                login_la_cloceMouseExited(evt);
            }
        });
        jLayeredPane1.add(login_la_cloce);
        login_la_cloce.setBounds(1310, 0, 30, 30);

        login_la_mini.setBackground(new java.awt.Color(255, 255, 255));
        login_la_mini.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        login_la_mini.setForeground(new java.awt.Color(0, 0, 0));
        login_la_mini.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        login_la_mini.setText("-");
        login_la_mini.setOpaque(true);
        login_la_mini.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                login_la_miniMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                login_la_miniMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                login_la_miniMouseExited(evt);
            }
        });
        jLayeredPane1.add(login_la_mini);
        login_la_mini.setBounds(1280, 0, 30, 30);

        employee_b_enter.setBackground(new java.awt.Color(0, 0, 204));
        employee_b_enter.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        employee_b_enter.setForeground(new java.awt.Color(0, 0, 0));
        employee_b_enter.setText("Enter");
        employee_b_enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employee_b_enterActionPerformed(evt);
            }
        });
        jLayeredPane1.add(employee_b_enter);
        employee_b_enter.setBounds(1050, 390, 180, 32);

        employee_b_delete.setBackground(new java.awt.Color(0, 0, 204));
        employee_b_delete.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        employee_b_delete.setForeground(new java.awt.Color(0, 0, 0));
        employee_b_delete.setText("Delete");
        employee_b_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employee_b_deleteActionPerformed(evt);
            }
        });
        jLayeredPane1.add(employee_b_delete);
        employee_b_delete.setBounds(750, 390, 180, 32);

        employee_b_update.setBackground(new java.awt.Color(0, 0, 204));
        employee_b_update.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        employee_b_update.setForeground(new java.awt.Color(0, 0, 0));
        employee_b_update.setText("Update");
        employee_b_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employee_b_updateActionPerformed(evt);
            }
        });
        jLayeredPane1.add(employee_b_update);
        employee_b_update.setBounds(450, 390, 180, 32);

        employee_b_search.setBackground(new java.awt.Color(0, 0, 204));
        employee_b_search.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        employee_b_search.setForeground(new java.awt.Color(0, 0, 0));
        employee_b_search.setText("Search");
        employee_b_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employee_b_searchActionPerformed(evt);
            }
        });
        jLayeredPane1.add(employee_b_search);
        employee_b_search.setBounds(140, 390, 180, 38);
        jLayeredPane1.add(jSeparator1);
        jSeparator1.setBounds(0, 30, 1340, 10);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jLayeredPane1.add(jSeparator3);
        jSeparator3.setBounds(990, 390, 10, 30);

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jLayeredPane1.add(jSeparator4);
        jSeparator4.setBounds(380, 390, 10, 30);

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jLayeredPane1.add(jSeparator5);
        jSeparator5.setBounds(690, 390, 10, 30);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Last Name");
        jLayeredPane1.add(jLabel3);
        jLabel3.setBounds(780, 40, 140, 25);

        employee_tx_lname.setBackground(new java.awt.Color(204, 204, 204));
        employee_tx_lname.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        employee_tx_lname.setForeground(new java.awt.Color(0, 0, 0));
        employee_tx_lname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                employee_tx_lnameKeyPressed(evt);
            }
        });
        jLayeredPane1.add(employee_tx_lname);
        employee_tx_lname.setBounds(910, 40, 330, 28);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("First Name");
        jLayeredPane1.add(jLabel2);
        jLabel2.setBounds(10, 40, 140, 25);

        employee_tx_fname.setBackground(new java.awt.Color(204, 204, 204));
        employee_tx_fname.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        employee_tx_fname.setForeground(new java.awt.Color(0, 0, 0));
        employee_tx_fname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employee_tx_fnameActionPerformed(evt);
            }
        });
        employee_tx_fname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                employee_tx_fnameKeyPressed(evt);
            }
        });
        jLayeredPane1.add(employee_tx_fname);
        employee_tx_fname.setBounds(140, 40, 330, 28);

        employee_tx_nic.setBackground(new java.awt.Color(204, 204, 204));
        employee_tx_nic.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        employee_tx_nic.setForeground(new java.awt.Color(0, 0, 0));
        employee_tx_nic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                employee_tx_nicKeyPressed(evt);
            }
        });
        jLayeredPane1.add(employee_tx_nic);
        employee_tx_nic.setBounds(140, 90, 330, 28);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("NIC Number");
        jLayeredPane1.add(jLabel4);
        jLabel4.setBounds(10, 90, 140, 25);

        employee_tx_tel.setBackground(new java.awt.Color(204, 204, 204));
        employee_tx_tel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        employee_tx_tel.setForeground(new java.awt.Color(0, 0, 0));
        employee_tx_tel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                employee_tx_telKeyPressed(evt);
            }
        });
        jLayeredPane1.add(employee_tx_tel);
        employee_tx_tel.setBounds(910, 90, 330, 28);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Tell Number");
        jLayeredPane1.add(jLabel5);
        jLabel5.setBounds(780, 90, 140, 25);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Address");
        jLayeredPane1.add(jLabel6);
        jLabel6.setBounds(10, 140, 140, 25);

        employee_tx_address.setBackground(new java.awt.Color(204, 204, 204));
        employee_tx_address.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        employee_tx_address.setForeground(new java.awt.Color(0, 0, 0));
        employee_tx_address.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                employee_tx_addressKeyPressed(evt);
            }
        });
        jLayeredPane1.add(employee_tx_address);
        employee_tx_address.setBounds(140, 140, 1100, 28);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("User Type");
        jLayeredPane1.add(jLabel7);
        jLabel7.setBounds(10, 190, 140, 25);

        employee_combox_type.setBackground(new java.awt.Color(204, 204, 204));
        employee_combox_type.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        employee_combox_type.setForeground(new java.awt.Color(0, 0, 0));
        employee_combox_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Employee", "Cashier", "Stock Keper", "Maneger" }));
        employee_combox_type.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                employee_combox_typeKeyPressed(evt);
            }
        });
        jLayeredPane1.add(employee_combox_type);
        employee_combox_type.setBounds(140, 190, 330, 28);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("User Name");
        jLayeredPane1.add(jLabel8);
        jLabel8.setBounds(10, 240, 140, 25);

        employee_tx_uname.setBackground(new java.awt.Color(204, 204, 204));
        employee_tx_uname.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        employee_tx_uname.setForeground(new java.awt.Color(0, 0, 0));
        employee_tx_uname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                employee_tx_unameKeyPressed(evt);
            }
        });
        jLayeredPane1.add(employee_tx_uname);
        employee_tx_uname.setBounds(140, 240, 330, 28);

        employee_tx_upas1.setBackground(new java.awt.Color(204, 204, 204));
        employee_tx_upas1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        employee_tx_upas1.setForeground(new java.awt.Color(0, 0, 0));
        employee_tx_upas1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                employee_tx_upas1KeyPressed(evt);
            }
        });
        jLayeredPane1.add(employee_tx_upas1);
        employee_tx_upas1.setBounds(140, 290, 330, 28);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("User Password");
        jLayeredPane1.add(jLabel9);
        jLabel9.setBounds(10, 290, 140, 25);

        employee_b_new.setBackground(new java.awt.Color(0, 0, 204));
        employee_b_new.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        employee_b_new.setForeground(new java.awt.Color(0, 0, 0));
        employee_b_new.setText("New");
        employee_b_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employee_b_newActionPerformed(evt);
            }
        });
        jLayeredPane1.add(employee_b_new);
        employee_b_new.setBounds(1050, 390, 180, 32);

        emoployee_jcheckbox.setText("Active or Inactive");
        jLayeredPane1.add(emoployee_jcheckbox);
        emoployee_jcheckbox.setBounds(780, 190, 140, 24);

        jLabel10.setBackground(new java.awt.Color(102, 204, 255));
        jLabel10.setFont(new java.awt.Font("Arial", 2, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(51, 51, 51));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("EMPLOYEE");
        jLabel10.setOpaque(true);
        jLayeredPane1.add(jLabel10);
        jLabel10.setBounds(0, 0, 1280, 30);

        getContentPane().add(jLayeredPane1);
        jLayeredPane1.setBounds(10, 10, 1340, 750);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void login_la_miniMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_la_miniMouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_login_la_miniMouseClicked

    private void login_la_miniMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_la_miniMouseEntered
        login_la_mini.setBackground(Color.gray);
    }//GEN-LAST:event_login_la_miniMouseEntered

    private void login_la_miniMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_la_miniMouseExited
        login_la_mini.setBackground(Color.white);
    }//GEN-LAST:event_login_la_miniMouseExited

    private void login_la_cloceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_la_cloceMouseClicked
        SystemClose();
    }//GEN-LAST:event_login_la_cloceMouseClicked

    private void login_la_cloceMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_la_cloceMouseEntered
        login_la_cloce.setBackground(Color.red);
    }//GEN-LAST:event_login_la_cloceMouseEntered

    private void login_la_cloceMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_la_cloceMouseExited
        login_la_cloce.setBackground(Color.white);
    }//GEN-LAST:event_login_la_cloceMouseExited

    private void employee_tx_fnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employee_tx_fnameKeyPressed
        TXValidaton(evt, employee_tx_fname, 50, "A");
        if (evt.getKeyCode() == 10) {
            if (!employee_tx_fname.getText().isEmpty()) {
                employee_tx_lname.grabFocus();
            } else {
                employee_tx_fname.grabFocus();
            }
        }
    }//GEN-LAST:event_employee_tx_fnameKeyPressed

    private void employee_tx_lnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employee_tx_lnameKeyPressed
        TXValidaton(evt, employee_tx_lname, 50, "A");
        if (evt.getKeyCode() == 10) {
            if (!employee_tx_lname.getText().isEmpty()) {
                employee_tx_nic.grabFocus();
            } else {
                employee_tx_lname.grabFocus();
            }
        }
    }//GEN-LAST:event_employee_tx_lnameKeyPressed

    private void employee_tx_nicKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employee_tx_nicKeyPressed
        TXValidaton(evt, employee_tx_nic, 14, "N");
        if (evt.getKeyCode() == 10) {
            if (!employee_tx_nic.getText().isEmpty()) {
                employee_tx_tel.grabFocus();
            } else {
                employee_tx_nic.grabFocus();
            }
        }
    }//GEN-LAST:event_employee_tx_nicKeyPressed

    private void employee_tx_telKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employee_tx_telKeyPressed
        TXValidaton(evt, employee_tx_tel, 10, "N");
        if (evt.getKeyCode() == 10) {
            if (!employee_tx_tel.getText().isEmpty()) {
                employee_tx_address.grabFocus();
            } else {
                employee_tx_tel.grabFocus();
            }
        }
    }//GEN-LAST:event_employee_tx_telKeyPressed

    private void employee_tx_addressKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employee_tx_addressKeyPressed
        TXValidaton(evt, employee_tx_address, 140, "NA");
        if (evt.getKeyCode() == 10) {
            if (!employee_tx_address.getText().isEmpty()) {
                employee_combox_type.grabFocus();
                employee_combox_type.showPopup();
            } else {
                employee_tx_address.grabFocus();
            }
        }
    }//GEN-LAST:event_employee_tx_addressKeyPressed

    private void employee_tx_unameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employee_tx_unameKeyPressed
        TXValidaton(evt, employee_tx_uname, 20, "NA");
        if (evt.getKeyCode() == 10) {
            if (!employee_tx_uname.getText().isEmpty()) {
                employee_tx_upas1.grabFocus();
            } else {
                employee_tx_uname.grabFocus();
            }
        }
    }//GEN-LAST:event_employee_tx_unameKeyPressed

    private void employee_tx_upas1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employee_tx_upas1KeyPressed
        TXValidaton(evt, employee_tx_upas1, 20, "NA");
        if (evt.getKeyCode() == 10) {
            if (!employee_tx_upas1.getText().isEmpty()) {
                employee_tx_upas2.grabFocus();
            } else {
                employee_tx_upas1.grabFocus();
            }
        }
    }//GEN-LAST:event_employee_tx_upas1KeyPressed

    private void employee_tx_upas2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employee_tx_upas2KeyPressed
        TXValidaton(evt, employee_tx_upas2, 20, "NA");
        if (evt.getKeyCode() == 10) {
            if (!String.valueOf(employee_tx_upas2.getPassword()).isEmpty()) {
                if (String.valueOf(employee_tx_upas2.getPassword()).equals(employee_tx_upas1.getText())) {
                    employee_b_enter.grabFocus();
                    employee_b_enter.doClick();
                }
            } else {
                employee_tx_upas2.grabFocus();
            }
        }
    }//GEN-LAST:event_employee_tx_upas2KeyPressed

    private void employee_tx_fnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employee_tx_fnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employee_tx_fnameActionPerformed

    private void employee_combox_typeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employee_combox_typeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_UP) {
            employee_combox_type.grabFocus();
            employee_combox_type.showPopup();
        }
        if (evt.getKeyCode()==10) {
            if(employee_combox_type.getSelectedIndex()==0){
                employee_tx_uname.setText("NO");
                employee_tx_upas1.setText("NO");
                employee_tx_upas2.setText("NO");
                employee_b_enter.doClick();
            }else{
                employee_tx_uname.grabFocus();
            }
        } else {
            employee_combox_type.grabFocus();
            employee_combox_type.showPopup();
        }
    }//GEN-LAST:event_employee_combox_typeKeyPressed

    private void employee_b_enterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employee_b_enterActionPerformed
        addTableANDUpdateTable(1);
    }//GEN-LAST:event_employee_b_enterActionPerformed

    private void employee_b_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employee_b_deleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employee_b_deleteActionPerformed

    private void employee_b_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employee_b_searchActionPerformed
        if(!employee_tx_uname.getText().trim().isEmpty()) {
            employeeSearch();
        }else{
            employee_tx_nic.grabFocus();
        }
    }//GEN-LAST:event_employee_b_searchActionPerformed

    private void employee_jTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employee_jTableMouseClicked
       if(employee_jTable.getSelectedRowCount() == 1){
           employee_b_enter.setVisible(false);
           employee_b_new.setVisible(true);
           emoployee_jcheckbox.setVisible(true);
           DefaultTableModel t1Model = (DefaultTableModel) employee_jTable.getModel();
        employee_tx_fname.setText(t1Model.getValueAt(employee_jTable.getSelectedRow(),0).toString());
        employee_tx_lname.setText(t1Model.getValueAt(employee_jTable.getSelectedRow(),1).toString());
        employee_tx_nic.setText(t1Model.getValueAt(employee_jTable.getSelectedRow(),2).toString());
        employee_tx_tel.setText(t1Model.getValueAt(employee_jTable.getSelectedRow(),3).toString());
        employee_tx_address.setText(t1Model.getValueAt(employee_jTable.getSelectedRow(),4).toString());
        employee_combox_type.setSelectedItem(t1Model.getValueAt(employee_jTable.getSelectedRow(),5).toString());
        employee_tx_uname.setText(t1Model.getValueAt(employee_jTable.getSelectedRow(),6).toString());
        employee_tx_upas1.setText(t1Model.getValueAt(employee_jTable.getSelectedRow(),7).toString());
        
        if(t1Model.getValueAt(employee_jTable.getSelectedRow(),8).toString().equals("Active")){
            emoployee_jcheckbox.setSelected(true);
        }else{
             emoployee_jcheckbox.setSelected(false);
        }
        
       }else{
           employee_b_enter.setVisible(true);
           employee_b_new.setVisible(false);
           emoployee_jcheckbox.setVisible(false);
       }
        
    }//GEN-LAST:event_employee_jTableMouseClicked

    private void employee_b_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employee_b_newActionPerformed
       clearemployeeFields();
    }//GEN-LAST:event_employee_b_newActionPerformed

    private void employee_b_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employee_b_updateActionPerformed
       addTableANDUpdateTable(2);
    }//GEN-LAST:event_employee_b_updateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new employee().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox emoployee_jcheckbox;
    private javax.swing.JButton employee_b_delete;
    private javax.swing.JButton employee_b_enter;
    private javax.swing.JButton employee_b_new;
    private javax.swing.JButton employee_b_search;
    private javax.swing.JButton employee_b_update;
    private javax.swing.JComboBox employee_combox_type;
    private javax.swing.JTable employee_jTable;
    private javax.swing.JTextField employee_tx_address;
    private javax.swing.JTextField employee_tx_fname;
    private javax.swing.JTextField employee_tx_lname;
    private javax.swing.JTextField employee_tx_nic;
    private javax.swing.JTextField employee_tx_tel;
    private javax.swing.JTextField employee_tx_uname;
    private javax.swing.JTextField employee_tx_upas1;
    private javax.swing.JPasswordField employee_tx_upas2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JLabel login_la_cloce;
    private javax.swing.JLabel login_la_mini;
    // End of variables declaration//GEN-END:variables

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> Singltan class 
     * *** >>> Why ------------->>> ek object ekk hdnn
     * *** >>> Parameters ------>>>
     * *** >>> Status ---------->>>
     */
//>>>>>>>>> Get Instance <<<<<<<<<<<  
    private static employee log = new employee();

    public static employee getLoginInstance() {
        return log;
    }
//>>>>>>>>> Get Instance <<<<<<<<<<<         

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> SystemClose()
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>> no
     * *** >>> Status ---------->>>
     */
    //>>>>>>>>> System cloce <<<<<<<<<<<   
    void SystemClose() {
        int x = JOptionPane.showConfirmDialog(this, "Do you sure close Employee Interface ?", "Exit Interface", JOptionPane.YES_NO_OPTION);
        if (JOptionPane.YES_OPTION == x) {
            this.dispose();
        } else if (JOptionPane.NO_OPTION == x) {
            setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
            login_la_cloce.setBackground(new Color(255, 255, 255));
        }
    }
    //>>>>>>>>> System close <<<<<<<<<<<       

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> TXValidaton()
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>> KeyEvent evt//JTextField txName//int lenth//String type
     * *** >>> Status ---------->>>
     */
    //>>>>>>>>> TXValidaton cloce <<<<<<<<<<<   
    private void TXValidaton(KeyEvent evt, JTextField txName, int lenth, String type) {
        int iNumber = evt.getKeyCode();
        if (txName.getText().length() <= lenth) {
            if (type.equals("N")) {

                if ((iNumber >= 96 & iNumber <= 105) | (iNumber >= 48 & iNumber <= 57) | (iNumber == 8) | (iNumber == 17) | (iNumber == 86)) {
                    txName.setEditable(true);
                } else {
                    txName.setEditable(false);
                }

            }
            if (type.equals("A")) {

                if ((iNumber >= 65 & iNumber <= 90) | (iNumber == 8) | (iNumber == 32) | (iNumber == 46) | (iNumber == 17)) {
                    txName.setEditable(true);
                } else {
                    txName.setEditable(false);
                }

            }
            if (type.equals("NA")) {

                if ((iNumber >= 96 & iNumber <= 105) | (iNumber >= 48 & iNumber <= 57) | (iNumber >= 65 & iNumber <= 90) | (iNumber == 8) | (iNumber == 45) | (iNumber == 32) | (iNumber == 44) | (iNumber == 46) | (iNumber == 47)) {
                    txName.setEditable(true);
                } else {
                    txName.setEditable(false);
                }

            }

        } else if ((iNumber == 8)) {
            txName.setEditable(true);
        } else {
            txName.setEditable(false);
        }
    }
    //>>>>>>>>> TXValidaton close <<<<<<<<<<<       
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> employeeTableInsert()
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>> 
     * *** >>> Status ---------->>>
     */
    //>>>>>>>>> employeeTableInsert cloce <<<<<<<<<<<      
    private void employeeTableInsert() {
        try {
            String fname = employee_tx_fname.getText();
            String lname = employee_tx_lname.getText();
            String address = employee_tx_address.getText();
            String tel = employee_tx_tel.getText();
            String nic = employee_tx_nic.getText();
            String type = (String) employee_combox_type.getSelectedItem();
            String uname = employee_tx_uname.getText();
          //  String upas2 = Arrays.toString(employee_tx_upas2.getPassword());
             String upas2 = "";
             char[] s = employee_tx_upas2.getPassword() ;
             for(char c : s ){
                 upas2 = upas2.concat(String.valueOf(c));
             }
            DBClass.putData("insert into employee (fname,lname,address,tel,nic,type,uname,password,stat)  values('" + fname + "' , '" + lname + "' ,'" + address + "', '" + tel + "' ,'" + nic + "' ,'" + type + "'  ,'" + uname + "','" + upas2 + "','1')");
            clearemployeeFields();
            addTotableEmployee();
        } catch (java.sql.SQLIntegrityConstraintViolationException e) {
            JOptionPane.showMessageDialog(null, "Bug Error EmployeeDB SQL   !!! \n " + e, "Error Massage", JOptionPane.ERROR_MESSAGE);
            employee_tx_fname.grabFocus();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Bug Error EmployeeDB Error !!! \n " + ex, "Error Massage", JOptionPane.ERROR_MESSAGE);
            employee_tx_fname.grabFocus();
        }
    }
    //>>>>>>>>> employeeTableInsert close <<<<<<<<<<<       
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     


//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> clearemployeeFields()
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>> 
     * *** >>> Status ---------->>>
     */
    //>>>>>>>>> clearemployeeFields cloce <<<<<<<<<<<        
    private void clearemployeeFields() {
        employee_tx_fname.setText(null);
        employee_tx_lname.setText(null);
        employee_tx_address.setText(null);
        employee_tx_tel.setText(null);
        employee_tx_nic.setText(null);
        employee_tx_uname.setText(null);
        employee_tx_upas2.setText(null);
        employee_combox_type.setSelectedIndex(0);
        employee_tx_upas1.setText(null);
        employee_tx_upas2.setVisible(true);
        employee_b_enter.setVisible(true);
        employee_b_new.setVisible(false);
        emoployee_jcheckbox.setVisible(false);
    }
    //>>>>>>>>> clearemployeeFields close <<<<<<<<<<<       
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     

    
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> addTotableEmployee()
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>> 
     * *** >>> Status ---------->>>
     */
    //>>>>>>>>> addTotableEmployee cloce <<<<<<<<<<<        
    
    private void addTotableEmployee() {
        try {
            ResultSet rs = DBClass.getData("select * from employee where  idemployee order by idemployee");
            DefaultTableModel dm = (DefaultTableModel) employee_jTable.getModel();
            employee_jTable.removeAll();
            dm.setRowCount(0);
            if (DBClass.r.isBeforeFirst() == true) {
                while (rs.next()) {
                    Vector v = new Vector();
                    v.add(rs.getString("fname"));
                    v.add(rs.getString("lname"));
                    v.add(rs.getString("nic"));
                    v.add(rs.getString("tel"));
                    v.add(rs.getString("address"));
                    v.add(rs.getString("type"));
                    v.add(rs.getString("uname"));
                    v.add(rs.getString("password"));
                    if (rs.getInt("stat") == 1) {
                        v.add("Active");
                    } else {
                        v.add("Inactive");
                    }
                    dm.addRow(v);
                }
            }

        } catch (SQLException sqle) {
            JOptionPane.showMessageDialog(this, "Employee Table Error SQl \n" + sqle, "Error Massage", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Employee Table Error \n" + e, "Error Massage", JOptionPane.ERROR_MESSAGE);
        }
    }
    //>>>>>>>>> addTotableEmployee close <<<<<<<<<<<       
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     

    
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> employeeSearch()
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>> 
     * *** >>> Status ---------->>>
     */
    //>>>>>>>>> employeeSearch cloce <<<<<<<<<<<        
    
    private void employeeSearch() {
        try {
            ResultSet rs = DBClass.getData("select * from employee where  nic='"+employee_tx_nic.getText()+"' ");
            DefaultTableModel dm = (DefaultTableModel) employee_jTable.getModel();
            employee_jTable.removeAll();
            dm.setRowCount(0);
            if (DBClass.r.isBeforeFirst() == true) {
                while (rs.next()) {
                    Vector v = new Vector();
                    v.add(rs.getString("fname"));
                    v.add(rs.getString("lname"));
                    v.add(rs.getString("nic"));
                    v.add(rs.getString("tel"));
                    v.add(rs.getString("address"));
                    v.add(rs.getString("type"));
                    v.add(rs.getString("uname"));
                    v.add(rs.getString("password"));
                    if (rs.getInt("stat") == 1) {
                        v.add("Active");
                    } else {
                        v.add("Inactive");
                    }
                    dm.addRow(v);
                }
            }
         } catch (SQLException sqle) {
            JOptionPane.showMessageDialog(this, "Employee Search Table Error SQl \n" + sqle, "Error Massage", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Employee Search Table Error \n" + e, "Error Massage", JOptionPane.ERROR_MESSAGE);
        }    
    }

    //>>>>>>>>> employeeSearch close <<<<<<<<<<<       
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     
    
    
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> addTableANDUpdateTable()
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>> int x
     * *** >>> Status ---------->>>
     */
    //>>>>>>>>> addTableANDUpdateTable cloce <<<<<<<<<<<        
    
       
    private void addTableANDUpdateTable(int x){
         if (!(employee_tx_fname.getText().trim().isEmpty() | employee_tx_lname.getText().trim().isEmpty()
                | employee_tx_tel.getText().trim().isEmpty() | employee_tx_nic.getText().trim().isEmpty()
                | employee_tx_address.getText().trim().isEmpty() | employee_tx_uname.getText().trim().isEmpty()
                | employee_tx_upas1.getText().trim().isEmpty() | Arrays.toString(employee_tx_upas2.getPassword()).isEmpty())) {
           if(x==1){
               employeeTableInsert();
           }else{
               employeeTableUpdate();
           }
        } else if (employee_tx_fname.getText().trim().isEmpty()) {
            employee_tx_fname.grabFocus();
        } else if (employee_tx_lname.getText().trim().isEmpty()) {
            employee_tx_lname.grabFocus();
        } else if (employee_tx_tel.getText().trim().isEmpty()) {
            employee_tx_tel.grabFocus();
        } else if (employee_tx_nic.getText().trim().isEmpty()) {
            employee_tx_nic.grabFocus();
        } else if (employee_tx_address.getText().trim().isEmpty()) {
            employee_tx_address.grabFocus();
        } else if (employee_tx_uname.getText().trim().isEmpty()) {
            employee_tx_uname.grabFocus();
        } else if (employee_tx_upas1.getText().trim().isEmpty()) {
            employee_tx_upas1.grabFocus();
        } else if (Arrays.toString(employee_tx_upas2.getPassword()).isEmpty()) {
            employee_tx_upas2.grabFocus();
        }
    }
    //>>>>>>>>> addTableANDUpdateTable close <<<<<<<<<<<       
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     

    
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> employeeTableUpdate()
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>> 
     * *** >>> Status ---------->>>
     */
    //>>>>>>>>> addTableANDUpdateTable cloce <<<<<<<<<<<        
    private void employeeTableUpdate() {
       String upas2="";
        char[] s = employee_tx_upas2.getPassword() ;
             for(char c : s ){
                 upas2 = upas2.concat(String.valueOf(c));
       }
    }
    //>>>>>>>>> employeeTableUpdate close <<<<<<<<<<<       
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     
    
    
    
    
    
    
    
}
